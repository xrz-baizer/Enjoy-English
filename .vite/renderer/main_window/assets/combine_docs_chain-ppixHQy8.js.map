{"version":3,"file":"combine_docs_chain-ppixHQy8.js","sources":["../../../../node_modules/langchain/dist/chains/combine_docs_chain.js"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n"],"names":["StuffDocumentsChain","BaseChain","key","fields","values","docs","rest","text","pageContent","runManager","data","LLMChain","MapReduceDocumentsChain","currentDocs","intermediateSteps","i","inputs","d","formatted","results","_","outputKey","r","newInputs","result","RefineDocumentsChain","PromptTemplate","doc","baseInfo","documentInfo","value","res","baseInputs","initialInputs","SerializedLLMChain","SerializedRefineDocumentChain"],"mappings":"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","x_google_ignoreList":[0]}