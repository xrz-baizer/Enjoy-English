import{j as c}from"./index-DwDcCdzB.js";function y(u,e){const t=new Set;for(const i of e)u.has(i)&&t.add(i);return t}function d(u,e){const t=new Set(u);for(const i of e)t.add(i);return t}function h(u,e){const t=new Set(u);for(const i of e)t.delete(i);return t}function l(u){return Array.from(u).map(e=>`"${e}"`).join(", ")}class f extends c{static lc_name(){return"SequentialChain"}get inputKeys(){return this.inputVariables}get outputKeys(){return this.outputVariables}constructor(e){if(super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"returnAll",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.inputVariables=e.inputVariables,this.outputVariables=e.outputVariables??[],this.outputVariables.length>0&&e.returnAll)throw new Error("Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.");this.returnAll=e.returnAll??!1,this._validateChains()}_validateChains(){if(this.chains.length===0)throw new Error("Sequential chain must have at least one chain.");const e=this.memory?.memoryKeys??[],t=new Set(this.inputKeys),i=new Set(e),a=y(t,i);if(a.size>0)throw new Error(`The following keys: ${l(a)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);const n=d(t,i);for(const r of this.chains){let s=h(new Set(r.inputKeys),n);if(r.memory&&(s=h(s,new Set(r.memory.memoryKeys))),s.size>0)throw new Error(`Missing variables for chain "${r._chainType()}": ${l(s)}. Only got the following variables: ${l(n)}.`);const o=new Set(r.outputKeys),p=y(n,o);if(p.size>0)throw new Error(`The following output variables for chain "${r._chainType()}" are overlapping: ${l(p)}. This can lead to unexpected behaviour.`);for(const m of o)n.add(m)}if(this.outputVariables.length===0)if(this.returnAll){const r=h(n,t);this.outputVariables=Array.from(r)}else this.outputVariables=this.chains[this.chains.length-1].outputKeys;else{const r=h(new Set(this.outputVariables),new Set(n));if(r.size>0)throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${l(r)}.`)}}async _call(e,t){let i={};const a=e;let n=0;for(const s of this.chains){n+=1,i=await s.call(a,t?.getChild(`step_${n}`));for(const o of Object.keys(i))a[o]=i[o]}const r={};for(const s of this.outputVariables)r[s]=a[s];return r}_chainType(){return"sequential_chain"}static async deserialize(e){const t=[],i=e.input_variables,a=e.output_variables,n=e.chains;for(const r of n){const s=await c.deserialize(r);t.push(s)}return new f({chains:t,inputVariables:i,outputVariables:a})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),input_variables:this.inputVariables,output_variables:this.outputVariables,chains:e}}}class b extends c{static lc_name(){return"SimpleSequentialChain"}get inputKeys(){return[this.inputKey]}get outputKeys(){return[this.outputKey]}constructor(e){super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputKey",{enumerable:!0,configurable:!0,writable:!0,value:"input"}),Object.defineProperty(this,"outputKey",{enumerable:!0,configurable:!0,writable:!0,value:"output"}),Object.defineProperty(this,"trimOutputs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.trimOutputs=e.trimOutputs??!1,this._validateChains()}_validateChains(){for(const e of this.chains){if(e.inputKeys.filter(t=>!e.memory?.memoryKeys.includes(t)).length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${e.inputKeys.length} for ${e._chainType()}.`);if(e.outputKeys.length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${e.outputKeys.length} for ${e._chainType()}.`)}}async _call(e,t){let i=e[this.inputKey],a=0;for(const n of this.chains)a+=1,i=(await n.call({[n.inputKeys[0]]:i,signal:e.signal},t?.getChild(`step_${a}`)))[n.outputKeys[0]],this.trimOutputs&&(i=i.trim()),await t?.handleText(i);return{[this.outputKey]:i}}_chainType(){return"simple_sequential_chain"}static async deserialize(e){const t=[],i=e.chains;for(const a of i){const n=await c.deserialize(a);t.push(n)}return new b({chains:t})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),chains:e}}}export{f as SequentialChain,b as SimpleSequentialChain};
//# sourceMappingURL=sequential_chain-C5XYMzPu.js.map
