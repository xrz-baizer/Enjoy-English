{"version":3,"mappings":"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","names":["getCastFrameworkURL","hasLoadedCastFramework","isCastAvailable","isCastConnected","getCastContext","getCastSession","getCastSessionMedia","hasActiveCastSession","src","getDefaultCastOptions","getCastErrorMessage","code","listenCastContextEvent","type","handler","listenEvent","GoogleCastLoader","#player","IS_CHROME","IS_IOS","canGoogleCastSrc","ctx","loadEvent","openEvent","errorEvent","#loadCastFramework","#notifyRemoteStateChange","#showPrompt","peek","error","#createError","IS_SERVER","__vitePreload","GoogleCastProvider","loadStartEvent","loadScript","loadedEvent","options","#setOptions","errorCode","state","trigger","detail","message","loader"],"ignoreList":[0],"sources":["../../../../node_modules/@vidstack/react/prod/chunks/vidstack-CQQ1xKSy.js"],"sourcesContent":["\"use client\"\n\nimport { IS_CHROME, canGoogleCastSrc, IS_IOS, IS_SERVER, loadScript } from './vidstack-D5Pzx_k5.js';\nimport { listenEvent, peek } from './vidstack-CZgUA94N.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  return defaultMessage;\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-BeT6vBOi.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\n\nexport { getCastContext, getCastErrorMessage, getCastSession, getCastSessionMedia, hasActiveCastSession, listenCastContextEvent, loader };\n"],"file":"assets/vidstack-CQQ1xKSy-HKiAbYmq.js"}